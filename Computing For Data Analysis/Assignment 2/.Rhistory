cred <- OAuthFactory$new(consumerKey='8KI8oeRx9xLMkEfaP8ERQ',
consumerSecret='HrGMBPO7sAEJiCKoceNV0vVZeWQW2nVMYYJUzFmF8O0',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
registerTwitterOAuth(cred)
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
registerTwitterOAuth(cred)
cred <- OAuthFactory$new(consumerKey='8KI8oeRx9xLMkEfaP8ERQ',
consumerSecret='HrGMBPO7sAEJiCKoceNV0vVZeWQW2nVMYYJUzFmF8O0',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
registerTwitterOAuth(cred)
library(ROAuth)
load("~/twitter authentication.Rdata")
r_stats <- searchTwitter("@ATKPAS", n = 5, cainfo = "cacert.pem")
cred <- OAuthFactory$new(consumerKey='8KI8oeRx9xLMkEfaP8ERQ',
consumerSecret='HrGMBPO7sAEJiCKoceNV0vVZeWQW2nVMYYJUzFmF8O0',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
r_stats <- searchTwitter("@ATKPAS", n = 5, cainfo = "cacert.pem")
registerTwitterOAuth(cred)
load("~/twitter authentication.Rdata")
registerTwitterOAuth(cred)
r_stats <- searchTwitter("@ATKPAS", n = 5, cainfo = "cacert.pem")
r_stats
fix(cred)
cred
install.packages("RHadoop")
library(RHadoop)
system.time(y <- runif(1e7))
system.time(y <- runif(1e8))
dim(y)
length(y)
head(x)
z <- 1:10
z
for i in 1:10:
z[i] * z[i]
for (i in 1:10):
z[i] * z[i]
?for
for ( i in 1:10)
print i
for(i in c(1:10)): i
for(i in 1:5) z[i]
for (i in 1:5) print z[i]*z[i]
for(i in 1:5) print (z[i]*z[i])
z * z
x <- 1:10
y <- 1:10
for(i in 1:10) print(x[i] * y[i])
getwd()
library(twitteR)
load("~/twitter authentication.Rdata")
registerTwitterOAuth(cred)
recent_tweets <- searchTwitter("@ATKPAS", n = 5, cainfo = "cacert.pem")
recent_tweets
remove.packages("sudoku")
ages <- round(runif(1e6)*(99)) + 1
breaks <- c(0, 5, 12, 18, 25, 34, 45, 54, 70, 85, 100)
labels <- c("0 - 5", "6 - 12", "13 - 18", "19 - 25", "26 - 34", "35 - 45", "46 - 54", "55 - 70", "71 - 85", "86 - 100")
result <- cut(ages, breaks, labels)
df <- data.frame(ages, result)
head(df)
setwd("~/Active Tasks/ROSMA Simulation/04_ShinyApp/01_Intro_to_ROSMA/"
)
runApp("/.")
library(shiny)
runApp("/.")
getwd()
setwd("~/Active Tasks/ROSMA Simulation/04_ShinyApp/02_ROSMA_Simulator")
runApp("/.")
dir()
library(shiny)
runApp("./")
setwd("~/")
setwd("~/")
library(twitteR)
load("~/twitter authentication.Rdata")
registerTwitterOAuth(cred)
recent_tweets <- searchTwitter("@ATKPAS", n = 5, cainfo = "cacert.pem")
recent_tweets
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
x
y <- c(1:10)
y
z <- x * y
z
z[1:5]
z[6:10]
z[11]
z[11] <- 11*11
z
z + 2
names <- c("AppLe", "GooGle", "MICROsoft", "FaceBoOk")
names
tolower(names)
toupper(names)
paste(toupper(names), ", INC.", sep = "")
paste(toupper(names), ", INC.", sep = "--")
os <- read.csv("https://dl.dropboxusercontent.com/u/10064244/office_supplies.csv",
header = TRUE)
head(os, 3)
tail(os, 3)
class(os)
names(os)
names(os) <- tolower(names(os))
names(os)
str(os)
summary(os)
os$item_total <- os$quantity * os$unit_price
head(os)
ages <- round(runif(1e6)*(99)) + 1
hist(ages)
breaks <- c(0, 5, 12, 18, 25, 34, 45, 54, 70, 85, 100)
labels <- c("0 - 5", "6 - 12", "13 - 18", "19 - 25", "26 - 34", "35 - 45", "46 - 54", "55 - 70", "71 - 85", "86 - 100")
result <- cut(ages, breaks, labels)
df <- data.frame(ages, result)
head(df)
library(twitteR)
load("~/twitter authentication.Rdata")
registerTwitterOAuth(cred)
recent_tweets <- searchTwitter("@ATKPAS", n = 5, cainfo = "cacert.pem")
recent_tweets
x <- 4
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1, 3, 5)
y <- c(3, 2, 10)
z <- rbind(x, y)
class(z)
dim(z)
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
x <- 1:4
y <- 2
class(x + y)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
y <- x[[2]]
x[2]
str(y)
class(c(TRUE, FALSE))
d <- read.csv("C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/hw1_data.csv")
names(d)
head(d, 2)
rows(d)
length(d)
tail(d, 2)
d[47,]
sum(is.na(d$Ozone))
mean(d$Ozone, na.rm = TRUE)
s1 <- subset(d, Ozone > 31 && Temp > 90)
s1 <- subset(d, d$Ozone > 31 && d$Temp > 90)
s1 <- subset(x = d,subset= Ozone > 31 & Temp > 90)
s1
d
mean(s1$Solar.R, na.rm = TRUE)
d[, d$Month == 6]
d[d$Month == 6, ]
mean(d[d$Month == 6, ]$Temp, na.rm = TRUE
)
max(d[d$Month == 5, ]$Ozone)
max(d[d$Month == 5, ]$Ozone, na.rm = TRUE)
?function
as
x <- c(1, 2, 1, 2, 4, 6, 7)
y <- sort(x)
y
x
z <- list(x)
z
str(z)
which(x, y)
?which
z
z <- list(1, 1, 2, 3 , 2, 1, 4)
z
x
z <- as.factor(x)
z
y <- as.factor(x)
z <- levels(y)
z
z <- as.numeric(levels(y))
z
Unique <- function(x){
y <- as.factor(x)
z <- as.numeric(levels(y))
z
}
Unique(x)
Unique(c("a", "a", "b", "d"))
x <- c("a", "b", "a", "d")
class(x)
y <- as.factor(x)
levels(y)
y <- list(x)
y
z <- as.vector(y)
z
z <- unlist(y)
z
str(y)
ws <- c(1,1,2,1,3,1)
cumsum((unlist(sapply(ws, seq_len)) > 1) + 1)
sapply(ws, seq_len)
x <- 1:10
x[:5]
x[1:4]
x[6:]
zales <- read.table("clipboard", header = TRUE, sep = "\t")
zales <- read.table("clipboard", header = TRUE, sep = ",")
rm(zales)
zales <- read.table("clipboard", header = TRUE)
zales <- readClipboard()
zales <- read.table("clipboard", header = TRUE)
zales <- read.table("clipboard", header = FALSE)
rm(zales)
zales <- read.table("clipboard", header = TRUE, sep = "\t")
zales <- read.table("clipboard", header = TRUE, sep = "\t", fill = TRUE)
head(zales)
names(zales) <- tolower(names(zales))
?gsub
gsub("\.", "",names(zales) )
gsub("\\.", "",names(zales) )
names(zales) <- gsub("\\.", "",names(zales) )
hist(zales$avgsalescogs)
str(zales)
table(zales$avgsalescogs)
tail(zales)
zales[, zales$avgsalescogs == "[CANADA]"]
zales[zales$avgsalescogs == "[CANADA]", ]
zales[zales$avgsalescogs == 2.39, ]
zales[zales$avgsalescogs == "[Canada]", ]
zales[zales$avgsalescogs == "[Canada]", ] <- NULL
zales[zales$avgsalescogs != "[Canada]", ]
z <- zales[zales$avgsalescogs != "[Canada]", ]
z$avgsalescogs <- as.numeric(z$avgsalescogs)
hist(z$avgsalescogs)
table(z$avgsalescogs)
rm(z)
z <- zales[zales$avgsalescogs != "[Canada]", ]
str(z)
x <- unlist(z$avgsalescogs)
table(x)
y <- as.numeric(x)
table(y)
rm(y)
y <- as.numeric(as.character(x))
table(y)
names(y) <- NULL
head(y)
z$avgsalescogs <- y
head(z)
head(zales)
tail(z)
tail(zales)
rm(x)
hist(y)
hist(y, bin = 0.2)
?hist
hist(y, breaks = 0.2)
hist(y, breaks = 20)
hist(y, breaks = 20, xlim = 2)
hist(y, breaks = 20)
hist(y, breaks = 40)
data <- readClipboard()
?hist
data <- readClipboard()
data <- as.numeric(data)
hist(data, breaks = 8)
hist(data, breaks = 16)
hist(data, breaks = 8)
data <- readClipboard()
data <- as.numeric(data)
hist(data)
?install.packages
setwd("C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assigment 1/")
head(read.csv("./specdata/001.csv"))
?sapply
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
corr.testscript()
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
filepath <- paste0("./", directory, "/", sprintf("%03d", as.numeric(id)), ".csv")
data <- read.csv(filepath, header = TRUE)
if (summarize) summary(data)
data
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
# Construct the filepath
returnCompleteCases <- function(df){
cc <- sum(complete.cases(df))
cc
}
# Create a list of dataframes by using the getmonitor function
# to read in all the csv files specified by the user
ldf <- lapply(id, getmonitor, "specdata", FALSE)
# Apply the returnCompleteCases function and simplify the result
nobs <- sapply(ldf, returnCompleteCases)
# Assemble the result
result <- data.frame(id, nobs)
result
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
all_cc <- complete(paste0(directory, "/"))
above_threshold <- as.vector(all_cc[all_cc$nobs >= threshold, 1])
ldf <- lapply(above_threshold, getmonitor, "specdata", FALSE)
correlations <- sapply(ldf, cor, sulfate, nitrate, "complete.obs")
correlations
}
source('C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assigment 1/corr.R')
all_cc <- complete(paste0("specdata", "/"))
above_threshold <- as.vector(all_cc[all_cc$nobs >= 50, 1])
ldf <- lapply(above_threshold, getmonitor, "specdata", FALSE)
head(ldf[[1]])
sapply(ldf[[1]], cor, sulfate, nitrate, "complete.obs")
sapply(ldf, function(x) {cor(x$sulfate, x$nitrate, "complete.obs"}))
sapply(ldf, function(x) cor(x$sulfate, x$nitrate, "complete.obs"))
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
?tryCatch
corr.testscript()
corr.testscript()
corr.testscript()
corr.testscript()
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
# Construct the filepath
returnCompleteCases <- function(df){
cc <- sum(complete.cases(df))
cc
}
# Create a list of dataframes by using the getmonitor function
# to read in all the csv files specified by the user
ldf <- lapply(id, getmonitor, "specdata", FALSE)
# Apply the returnCompleteCases function and simplify the result
nobs <- sapply(ldf, returnCompleteCases)
# Assemble the result
result <- data.frame(id, nobs)
result
}
complete("specdata")
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
filepath <- paste0("./", directory, "/", sprintf("%03d", as.numeric(id)), ".csv")
data <- read.csv(filepath, header = TRUE)
if (summarize) summary(data)
data
}
df <- complete("specdata")
range(df$nobs)
df[df$nobs == 1, ]
df[nobs == 1, ]
str(df)
df[, df$nobs == 1]
df[df$nobs == 1,]
df$nobs == 1
df[df$nobs == 1, ]
range(nobs)
range(df$nobs)
df[df$nobs == 0, ]
complete.cases(read.csv("./specdata/275.csv"))
sum(complete.cases(read.csv("./specdata/275.csv")))
corr.testscript()
?if
corr.testscript()
corr.testscript()
fix(corr.testscript)
fix(corr.testscript)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
all_cc <- complete(paste0(directory, "/"))
above_threshold <- as.vector(all_cc[all_cc$nobs >= threshold, 1])
ldf <- lapply(above_threshold, getmonitor, "specdata", FALSE)
correlations <- sapply(ldf, function(x) ifelse(sum(complete.cases(x)) == 0, 0, cor(x$sulfate, x$nitrate, "complete.obs")))
correlations
}
cr <- corr("specdata")
head(cr)
cr <- corr("specdata", 150)
summary(cr)
cr <- corr("specdata", 150)
summary(cr)
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
all_cc <- complete(paste0(directory, "/"))
above_threshold <- as.vector(all_cc[all_cc$nobs > threshold, 1])
ldf <- lapply(above_threshold, getmonitor, "specdata", FALSE)
correlations <- sapply(ldf, function(x) ifelse(sum(complete.cases(x)) == 0, 0, cor(x$sulfate, x$nitrate, "complete.obs")))
correlations
}
cr <- corr("specdata", 150)
summary(cr)
?cor
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
all_cc <- complete(paste0(directory, "/"))
above_threshold <- as.vector(all_cc[all_cc$nobs > threshold, 1])
ldf <- lapply(above_threshold, getmonitor, "specdata", FALSE)
correlations <- sapply(ldf, function(x) ifelse(sum(complete.cases(x)) == 0, 0, cor(x$sulfate, x$nitrate, "pairwise.complete.obs")))
correlations
}
cr <- corr("specdata", 150)
summary(cr)
fix(corr.testscript)
head(cr)
source('C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assigment 1/getmonitor.R')
source('C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assigment 1/complete.R')
all_cc <- complete(paste0("specdata", "/"))
threshold <- 150
above_threshold <- as.vector(all_cc[all_cc$nobs > threshold, 1])
str(above_threshold)
ldf <- lapply(above_threshold, getmonitor, "specdata", FALSE)
str(ldf[[1]])
str(read.csv("./specdata/002.csv"))
summary(read.csv("./specdata/002.csv"))
summary(ldf[[1]])
find_cor <- function(x){
ifelse(sum(complete.cases(x)) == 0,
NA,
cor(x$sulfate, x$nitrate, "pairwise.complete.obs")
)
}
d1 <- read.csv("./specdata/275.csv")
str(d1)
summary(d1)
summary(read.csv("specdata/276.csv")
)
all_cc[all_cc$nobs == 0, ]
sum(complete.cases(read.csv("specdata/275.csv")))
find_cor(d1)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
source('C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assigment 1/corr.R')
source('C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assigment 1/getmonitor.R')
source('C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assigment 1/complete.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
