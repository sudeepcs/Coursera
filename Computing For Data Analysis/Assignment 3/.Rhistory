table(y)
names(y) <- NULL
head(y)
z$avgsalescogs <- y
head(z)
head(zales)
tail(z)
tail(zales)
rm(x)
hist(y)
hist(y, bin = 0.2)
?hist
hist(y, breaks = 0.2)
hist(y, breaks = 20)
hist(y, breaks = 20, xlim = 2)
hist(y, breaks = 20)
hist(y, breaks = 40)
data <- readClipboard()
?hist
data <- readClipboard()
data <- as.numeric(data)
hist(data, breaks = 8)
hist(data, breaks = 16)
hist(data, breaks = 8)
data <- readClipboard()
data <- as.numeric(data)
hist(data)
?install.packages
a <- matrix(1:10, 2, 5)
a
?matrix
x <- 1:6
y <- 5:10
rbind(x, y)
class(rbind(x, y))
?LETTERS
packageStatus
packageStatus()
?packageStatus
installed.packages()
str(a)
d <- read.csv("C:/Users/sconoo01/Downloads/Coursera Courses/Statistics One/Assignments and Quizzes/Stats1.13.HW.02.txt")
head (d)
d <- read.table("C:/Users/sconoo01/Downloads/Coursera Courses/Statistics One/Assignments and Quizzes/Stats1.13.HW.02.txt",
header = TRUE,)
d <- read.table("C:/Users/sconoo01/Downloads/Coursera Courses/Statistics One/Assignments and Quizzes/Stats1.13.HW.02.txt",
header = TRUE, sep = "\t")
head(d)
str(d)
mean(d$SR)
mean(d$SR)
var(d$SR)
var(d$SR)
mean(d[d$time == "pre", 4])
mean(d[d$time == "pre", 4])
mean(d[d$time == "pre", 4])
x <- (d[d$time == "pre", 4])
x
mean(x)
x <- (d[d$time == "post", 4])
var(x)
options(digits = 2)
var(x)
median(x)
head(d)
str(d)
tapply(condition, x, mean)
tapply(x, condition, mean)
split
?split
x
x <- d[d$time == "post", ]
tapply(condition, x, mea)
tapply(condition, x, mean)
tapply(x, condition mean)
tapply(x, condition, mean)
x <- split(d, condition)
x <- split(d, d$condition)
sapply(x, mean)
sapply(x, hist)
?split
x <- split(d, c(d$condition, d$time), drop = TRUE)
x <- split(d, c(d$condition))
x[[1]]
x <- split(d, list(d$condition, d$time), drop = TRUE)
x[[1]]
x[[2]]
hist(x[[1]])
hist(x[[1]]$SR)
lapply(x, function(y) hist(y[[1]]$SR)
)
lapply(x, function(x) hist(x[[1]]$SR))
hist(x[[3]]$SR)
hist(x[[1]]$SR)
hist(x[[2]]$SR)
hist(x[[3]]$SR)
hist(x[[4]]$SR)
hist(x[[5]]$SR)
hist(x[[6]]$SR)
x[[3]]
sapply(x, mean)
install.packages("shiny")
library(PivotalR)
d <- readClipboard()
d <- readClipboard()
head(d)
d1 <- strsplit(d, split="-")
head(d1)
d2 <- unlist(d1)
head(d2)
head(d1, 10)
d1[[1,]]
d1[[1], ]
d1[[1]]
d1[[2]]
d1[[1, ]]
d1[1,]
d1[[1]]
d1[[,]]
d1[[,2]]
d1[[,0]]
x <- sapply(d1, "[", 1)
head(x)
writeClipboard(x)
x <- sapply(d1, "[", 2)
writeClipboard(x)
dev.off()
dev.set(1)
x <- rnorm()
x <- rnorm(100)
hist(x)
dev.set(2)
hist(x)
dev.set(2)
dev.set(3)
dev.off()
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x, y)
par(las = 1)
x <- rnorm(100)
plot(x, y)
x1 <- rnorm(10)
y1 <- rnorm(10)
points(x1, y1, col = "red")
b <- as.data.frame(a)
b
b[, 1]
b[, c(1:2)]
?gl
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data = Orthodont)
xyplot(distance ~ age | Subject, data = Orthodont, type = "b")
store_sales <- readClipboard()
store_sales <- read.table("clipboard", sep = "\t", header = F)
store_sales <- read.table("clipboard", sep = "\t", header = F)
head(store_sales)
names(store_sales) <- c("store_num", "Q4_sales")
head(store_sales)
str(store_sales)
summary(store_sales)
store_class <- cut(store_sales$Q4_sales, breaks = c(2.5E6, 5E6, 1E7, 2E7), labels = c("Under 0.25M", "Between 0.25 - 0.5M", "Between 0.5 - 1M", "Between 1 - 2M"))
store_class <- cut(store_sales$Q4_sales, breaks = c(2.5E6, 5E6, 1E7), labels = c("Under 0.25M", "Between 0.25 - 0.5M", "Between 0.5 - 1M", "Between 1 - 2M"))
store_class <- cut(store_sales$Q4_sales, breaks = c(2.5E6, 5E6, 1E7))
head(store_class)
head(store_sales$Q4_sales)
store_class <- cut(store_sales$Q4_sales, breaks = as.numeric(c(2.5E6, 5E6, 1E7)))
head(store_class)
install.packages("sentiment")
?equal.count
library(lattice)
?equal.count
setwd("~/Active Tasks/All Hands 2013/Airlines Data/Shiny/01_DemoDash")
load("~/twitter authentication.Rdata")
library(twitteR)
registerTwitterOAuth(cred)
aa_tweets <- searchTwitter("@AmericanAirlines", n = 20)
aa_tweets <- searchTwitter("@AmericanAirlines", n = 20, cacert = "cacert.pem")
aa_tweets <- searchTwitter("@AmericanAirlines", n = 20, cainfo = "cacert.pem")
aa_tweets <- searchTwitter("@AmericanAirlines", n = 20, cainfo = "~/cacert.pem")
aa_tweets <- searchTwitter("@AmericanAirlines", n = 20, cainfo = "~/cacert.pem")
aa_tweets <- searchTwitter("@AmericanAirlines", n = 20, cainfo = "cacert.pem")
aa_tweets <- searchTwitter("@AmericanAirlines", n = 5, cainfo = "cacert.pem")
aa_tweets <- searchTwitter("@AmericanAirlines", n = 5, cainfo = "cacert.pem", retryOnRateLimit=10)
setwd("~")
getwd()
aa_tweets <- searchTwitter("@AmericanAirlines", n = 5, cainfo = "cacert.pem")
detach("package:twitteR", unload=TRUE)
library("twitteR", lib.loc="C:/Users/sconoo01/Documents/R/win-library/2.15")
rm(cred)
rm(aa_tweets)
load("~/twitter authentication.Rdata")
registerTwitterOAuth(cred)
aa_tweets <- searchTwitteR("@AmericanAirlines", n = 5, cainfo = "cacert.pem")
aa_tweets <- searchTwitteR("@ATKPAS", n = 5, cainfo = "cacert.pem")
aa_tweets
delta_tweets <- searchTwitteR("@delta", n = 5, cainfo = "cacert.pem")
delta_tweets
setwd("~/Active Tasks/All Hands 2013/Airlines Data/Shiny/")
hu.liu.pos = scan('data/positive-words.txt',
what='character', comment.char=';')
setwd("~/Active Tasks/All Hands 2013/Airlines Data/Shiny/01_DemoDash/")
hu.liu.pos = scan('data/positive-words.txt',
what='character', comment.char=';')
hu.liu.neg = scan('data/negative-words.txt',
what='character', comment.char=';')
library(twitteR)
load("~/twitter authentication.Rdata")
registerTwitterOAuth(cred)
aa_tweets <- searchTwitteR("@AmericanAir", n = 5, cainfo = "cacert.pem")
aa_tweets
detach(lattice)
detach("package:lattice", unload=TRUE)
?coplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
names(BodyWeight)
head(BodyWeight)
str(BodyWeight)
summary(BodyWeight)
?mtext
?lsegments
set.seed(1)
rpois(5, 2)
plot(0, 0, main = expression("theta")
)
plot(0, 0, main = expression(theta))
?mtext
?axis
?lines
?mtext
setwd("C:/Users/sconoo01/Downloads/Coursera Courses/Computing for Data Analysis/Quizzes & Assignments/Assignment 3")
outcome <- read.csv("./outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("./outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
title(main= "Heart Attack 30-day Death Rate")
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Attack 30-day Death Rate")
names(outcome)
outcome[, c(17, 23)] <- as.numeric(outcome[, c(17, 23)])
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
par(mfrow = c(3, 1))
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Attack 30-day Death Rate")
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Failure 30-day Death Rate")
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Attack 30-day Death Rate")
par(mfrow = c(3, 1))
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Attack 30-day Death Rate")
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Failure 30-day Death Rate")
hist(outcome[, 17], xlab = "30-day Death Rate", main = "Heart Failure 30-day Death Rate")
range(outcome[, 11])
range(outcome[, 17])
range(outcome[, 17], na.rm= TRUE)
range(outcome[, 11], na.rm= TRUE)
range(outcome[, 23], na.rm= TRUE)
par(mfrow = c(3, 1))
?hist
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Attack 30-day Death Rate")
hist(outcome[, 17], xlab = "30-day Death Rate", main = "Heart Failure 30-day Death Rate")
hist(outcome[, 23], xlab = "30-day Death Rate", main = "Pneumonia 30-day Death Rate", xlim = 22)
hist(outcome[, 23], xlab = "30-day Death Rate", main = "Pneumonia 30-day Death Rate", xlim = c(0,22))
hist(outcome[, 17], xlab = "30-day Death Rate", main = "Heart Failure 30-day Death Rate", xlim = c(0, 22))
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Attack 30-day Death Rate", xlim = c(0, 22))
?mfrow
?par
hist(outcome[, 11], xlab = "30-day Death Rate", main = "Heart Attack 30-day Death Rate", xlim = c(0, 22))
line(y = mean(outcome[, 11], na.rm= TRUE))
line(y = mean(0, outcome[, 11], na.rm= TRUE))
?line
?abline
abline(v = mean(outcome[, 11], na.rm = TRUE))
?plotmath
hist(outcome[, 11], xlab = "30-day Death Rate", main = paste0("Heart Attack 30-day Death Rate", text(hat(x))) , xlim = c(0, 22))
hist(outcome[, 11], xlab = "30-day Death Rate", main = paste0("Heart Attack 30-day Death Rate", text(hat("x"))) , xlim = c(0, 22))
hist(outcome[, 11], xlab = "30-day Death Rate", main = paste0("Heart Attack 30-day Death Rate", expression(hat("x"))) , xlim = c(0, 22))
hist(outcome[, 11], xlab = "30-day Death Rate", main = paste0("Heart Attack 30-day Death Rate", expression(hat(X))) , xlim = c(0, 22))
hist(outcome[, 11], xlab = "30-day Death Rate", main = paste0("Heart Attack 30-day Death Rate ", expression(hat(x))) , xlim = c(0, 22))
table(outcome$State)
?table
t <- table(outcome$State)
str(t)
t <- as.vector(t)
head(t)
names(t)
str(t)
names(t)
t <- names(t)
rm(t)
t <- table(outcome$State)
x <- with(outcome, t)
head(x)
x[x > 20]
t[t < 20]
names(t[t < 20])
keep.states <- (table(outcome$States)[table(outcome$States) > 19]
)
keep.states <- table(outcome$States)[table(outcome$States) > 19]
states.count <- table(outcome$State)
keep.states <- table(outcome$State)[table(outcome$State) > 19]
outcome2 <- outcome[, outcome$State %in% keep.states]
outcome2 <- outcome[outcome$State %in% keep.states, ]
outcome2 <- outcome[outcome$State in keep.states, ]
keep.states
head(keep.states)
names(keep.states)
keep.states <- names(table(outcome$State)[table(outcome$State) > 19])
outcome2 <- outcome[outcome$State %in% keep.states, ]
death <- outcome2[, 11]
state <- outcome2$State
boxplot(death, state)
boxplot(death ~ state)
drop.levels(state)
droplevels(state)
droplevels(outcome2)
outcome2 <- droplevels(outcome2)
death <- outcome2[, 11]
state <- outcome2$State
boxplot(death ~ state)
?boxplot
?plot
?stop
valid_state <- unique(outcome$State)
valid_state["CA"]
valid_state
?which
valid_state == "CA"
sum(valid_state == "CA")
valid_outcome <- c("heart attack", "heart failure", "pneumonia")
which(valid_outcome == "heart attack")
outcome_column <- c(11, 17, 23)
outcome_column[which(valid_outcome == "heart attack")]
state_outcome <- outcome[, c("Hospital.Name", "State", 11)]
state_outcome <- outcome[, c("Hospital.Name", "State")]
head(state_outcome)
state_outcome <- outcome[, c("Hospital.Name", "State", 11)]
which(names(outcome)=="Hospital.Name"
)
state_outcome <- outcome[outcome$State, c(2, 11)]
head(state_outcome)
state_outcome <- outcome[outcome$State == "CA", c(2, 11)]
head(state_outcome)
outcome[275, c(2, 11)]
outcome[275, "State"]
?sort
?order
names(state_outcome)
str(state_outcome)
is.na(state_outcome[, 2])
state_outcome <- state_outcome[, !is.na(state_outcome[, 2])]
state_outcome <- state_outcome[!is.na(state_outcome[, 2]), ]
summary(state_outcome)
names(state_outcome) <- c("name", "rate")
order(state_outcome, c("rate", "name")
)
head(state_outcome)
so <- state_outcome[with(state_outcome, order(rate, name))]
so <- state_outcome[with(state_outcome, order(rate, name)), ]
head(so)
so[1, 1]
source("best.R")
source("best.R")
source("best.R")
best("TX", "heart attack")
valid_outcome <- c("heart attack", "heart failure", "pneumonia")
valid_outcome == "heart attack"
sum(valid_outcome == "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
suppressWarnings(TRUE)
suppressWarnings(FALSE)
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "pneumonia")
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript.R")
submit()
submit()
submit()
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
raw_data <- read.csv("./outcome-of-care-measures.csv", colClasses = "character")
which(names(raw_data)=="State")
raw_data[, 11] <- as.numeric(raw_data[, 11])
all_states_outcome <- raw_data[, c(2, 7, x)]
all_states_outcome <- raw_data[, c(2, 7, 11)]
names(all_states_outcome) <- c("name", "state", "rate")
all_states_outcome <- all_states_outcome[!is.na(all_states_outcome$rate), ]
all_states_outcome <- all_states_outcome[with(all_states_outcome, order(rate, name)), ]
head(all_states_outcome)
rownames(all_states_outcome) <- NULL
head(all_states_outcome)
all_states_outcome <- all_states_outcome[with(all_states_outcome, order(state, rate, name)), ]
head(all_states_outcome)
?rank
all_states_outcome[all_states_outcome$State = "SC", ]
all_states_outcome[all_states_outcome$State == "SC", ]
all_states_outcome[all_states_outcome$State == "NC", ]
all_states_outcome[all_states_outcome$State == "TX", ]
all_states_outcome[all_states_outcome$state == "SC", ]
x <- all_states_outcome[all_states_outcome$state == "SC", ]
x[1, 10]
dim(x)
dim(10, 1)
x[10, 1]
states <- unique(raw_data$State)
head(states)
order(states)
sort(states)
states <- sort(unique(raw_data$State))
states
get_hospital <- function(x){
if (num == "best") num = 1
if (num == "worst") num = nrow(x)
x[num, 1]
}
get_hospital <- function(x, num){
if (num == "best") num = 1
if (num == "worst") num = nrow(x)
x[num, 1]
}
sapply(states, get_hospital, all_states_outcome, "worst")
sapply(states, get_hospital, all_states_outcome, 1)
?sapply
apply(states, get_hospital, all_states_outcome, 1)
lapply(as.list(states), get_hospital, all_states_outcome, 1)
lapply(as.list(states), get_hospital, all_states_outcome)
tapply(states, get_hospital, all_states_outcome, 1)
list(states)
as.list(states)
split(all_states_outcome, states)
x <- split(all_states_outcome, states)
x <- split(all_states_outcome, all_states_outcome$state)
x[[1]]
get_hospital <- function(num){
if (num == "best") num = 1
if (num == "worst") num = nrow(x)
x[num, 1]
}
sapply(x, get_hospital, "best")
tapply(x, get_hospital, "best")
lapply(x, get_hospital, "best")
sapply(x, get_hospital(x), "best")
get_hospital <- function(df, num){
if (num == "best") num = 1
if (num == "worst") num = nrow(df)
df[num, 1]
}
sapply(x, get_hospital, num = "best")
sapply(x, get_hospital, num = "worst")
sapply(x, get_hospital, num = 24)
y <- sapply(x, get_hospital, num = 24)
data.frame(y)
z <-as.data.frame(y)
str(z)
z
is.na(z$y
)
names(z) <- c("hospital", "state")
names(z)
lapply(x, get_hospital, num = 24)
z <- lapply(x, get_hospital, num = 24)
unlist(z)
str(unlist(z))
y <- unlist(z)
y
names(y)
y[]
names(y)<-NULL
y
z <- sapply(x, get_hospital, num = 24)
str(z)
data.frame(as.list(z))
y <- data.frame(as.list(z))
str(y)
head(y)
rm(y)
z
str(z)
unname(z)
y <- data.frame(hospital = unname(z), state = names(z))
str(y)
head(z)
head(y)
source("rankall.R")
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript.R")
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
